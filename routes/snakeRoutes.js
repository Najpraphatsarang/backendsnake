import express from 'express';
import Grid from 'gridfs-stream';
import mongoose from 'mongoose';
import Snake from '../models/Snake.js';

const router = express.Router();

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/', async (req, res) => {
    try {
        const snakes = await Snake.find();
        console.log("üêç Fetched Snakes:", snakes); 
        res.json(snakes);
    } catch (error) {
        console.error("‚ùå Error fetching snakes:", error);
        res.status(500).json({ message: 'Server Error', error });
    }
});

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° ID
router.get('/:id', async (req, res) => {
    try {
        const snake = await Snake.findById(req.params.id);
        if (!snake) {
            return res.status(404).json({ message: 'Snake not found' });
        }
        res.json(snake);
    } catch (error) {
        res.status(500).json({ message: 'Server Error', error });
    }
});

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå (Binomial)
router.get('/species/:binomial', async (req, res) => {
    try {
        const snake = await Snake.findOne({ binomial: req.params.binomial });

        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        if (!snake) {
            return res.status(404).json({ message: 'Snake species not found' });
        }

        res.json(snake);  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö
    } catch (error) {
        console.error("‚ùå Error fetching snake species:", error);
        res.status(500).json({ message: 'Server Error', error });
    }
});

// ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô GridFS
router.get('/files/:filename', (req, res) => {
    const filename = req.params.filename;
    const gfs = Grid(mongoose.connection.db, mongoose.mongo);
    gfs.collection('photos'); // ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á collection ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô MongoDB

    gfs.files.findOne({ filename }, (err, file) => {
        if (err || !file) {
            return res.status(404).send('File not found');
        }

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î content-type ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏Å‡πá‡∏ö
        res.set('Content-Type', file.contentType);  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏ä‡πà‡∏ô image/jpeg, image/png

        const readStream = gfs.createReadStream(file.filename); // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å GridFS
        readStream.pipe(res);  // ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á response ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ Postman ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
    });
});

export default router;
